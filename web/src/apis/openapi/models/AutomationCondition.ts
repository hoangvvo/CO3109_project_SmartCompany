/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutomationCondition
 */
export interface AutomationCondition {
    /**
     * 
     * @type {number}
     * @memberof AutomationCondition
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AutomationCondition
     */
    automation_id: number;
    /**
     * 
     * @type {string}
     * @memberof AutomationCondition
     */
    condition_type: AutomationConditionConditionTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AutomationCondition
     */
    device_id: number | null;
    /**
     * 
     * @type {string}
     * @memberof AutomationCondition
     */
    device_property: string | null;
    /**
     * 
     * @type {string}
     * @memberof AutomationCondition
     */
    condition_operator: AutomationConditionConditionOperatorEnum;
    /**
     * 
     * @type {number}
     * @memberof AutomationCondition
     */
    condition_value: number | null;
    /**
     * 
     * @type {string}
     * @memberof AutomationCondition
     */
    cron_expression: string | null;
}


/**
 * @export
 */
export const AutomationConditionConditionTypeEnum = {
    Device: 'device',
    Cron: 'cron'
} as const;
export type AutomationConditionConditionTypeEnum = typeof AutomationConditionConditionTypeEnum[keyof typeof AutomationConditionConditionTypeEnum];

/**
 * @export
 */
export const AutomationConditionConditionOperatorEnum = {
    Eq: 'eq',
    Neq: 'neq',
    Gt: 'gt',
    Gte: 'gte',
    Lt: 'lt',
    Lte: 'lte'
} as const;
export type AutomationConditionConditionOperatorEnum = typeof AutomationConditionConditionOperatorEnum[keyof typeof AutomationConditionConditionOperatorEnum];


/**
 * Check if a given object implements the AutomationCondition interface.
 */
export function instanceOfAutomationCondition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "automation_id" in value;
    isInstance = isInstance && "condition_type" in value;
    isInstance = isInstance && "device_id" in value;
    isInstance = isInstance && "device_property" in value;
    isInstance = isInstance && "condition_operator" in value;
    isInstance = isInstance && "condition_value" in value;
    isInstance = isInstance && "cron_expression" in value;

    return isInstance;
}

export function AutomationConditionFromJSON(json: any): AutomationCondition {
    return AutomationConditionFromJSONTyped(json, false);
}

export function AutomationConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutomationCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'automation_id': json['automation_id'],
        'condition_type': json['condition_type'],
        'device_id': json['device_id'],
        'device_property': json['device_property'],
        'condition_operator': json['condition_operator'],
        'condition_value': json['condition_value'],
        'cron_expression': json['cron_expression'],
    };
}

export function AutomationConditionToJSON(value?: AutomationCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'automation_id': value.automation_id,
        'condition_type': value.condition_type,
        'device_id': value.device_id,
        'device_property': value.device_property,
        'condition_operator': value.condition_operator,
        'condition_value': value.condition_value,
        'cron_expression': value.cron_expression,
    };
}

